from Bio import SeqIO
import argparse,os,sys

class MyParser(argparse.ArgumentParser):
	def error(self, message):
		sys.stderr.write('error: %s\n' % message)
		self.print_help()
		sys.exit(2)

parser=MyParser()
#parser = argparse.ArgumentParser()
parser.add_argument('--input_fasta', help='Fasta file containing the coding sequences. This file should be generated by gffread (Pertea and Pertea 2020) and the header should include rna-XM_code.')
parser.add_argument('--input_table', help='A tab delimited file containing the following information:locusID (gene identificator) and transcriptID.')
parser.add_argument('--output_file', help='Path to the output containing the longest CDS per gene in fasta format.')


if len(sys.argv)==1:
	parser.print_help()
	sys.exit(1)

args = parser.parse_args()

if args.input_fasta:
	fasta_file = args.input_fasta

if args.input_table:
	input_table = args.input_table

if args.output_file:
	output_file = args.output_file

	
"""
FUNCTIONS
"""
#input_table = "geneID_transcriptID_sorted"
#fasta_file = "alud_complete_CDS.fas"
#output_file = "alud_longest_CDS_per_gene.fas"

table_dict = {}
with open(input_table) as file:
	for line in file:
		data = line.rstrip().split("\t")
		if data[0] not in table_dict.keys():
			table_dict[data[0]] = []
			table_dict[data[0]].append(data[1])
		else:
			table_dict[data[0]].append(data[1])

fasta_CDS = SeqIO.to_dict(SeqIO.parse(fasta_file, "fasta"))

longest_CDS_per_gene = []
longest_CDS_per_gene_IDs = []

for gene in table_dict.keys():
	list_CDS = table_dict[gene]
	
	CDS_tmp_length = 0
	for CDS_id in list_CDS:
		new_CDS_id = "rna-" + CDS_id
		if len(fasta_CDS[new_CDS_id].seq) > CDS_tmp_length:
			max_len_record = fasta_CDS[new_CDS_id]
			CDS_tmp_length = len(fasta_CDS[new_CDS_id].seq)

	if max_len_record.id not in longest_CDS_per_gene_IDs:
		longest_CDS_per_gene_IDs.append(max_len_record.id)
		longest_CDS_per_gene.append(max_len_record)

with open(output_file, "w") as output_file_handle:
	for record in longest_CDS_per_gene:
		new_id = record.id.replace('rna-', '')
		new_seq = str(record.seq).upper()
		output_file_handle.write(">" + new_id + "\n" + new_seq + "\n")
